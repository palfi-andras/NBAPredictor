[DEFAULT]
# What mode to run the program in. Options are "Train", or "Analyze"
MODE = Train
# Which ML strategy to use (DNN or SVM)
METHOD = DNN
# Where to log program output
LOG_FILE = ./resources/NBAPredictor.log
# Where to save the stats and weights of a NN run
STAT_LOCATION = ./resources/predictions.json
# Where to save avg performance of features
FEATURE_PERFORMANCE_LOCATION = ./resources/features.json
# Where to dump TF Model Data so that models can be retrained
MODEL_DIR = ./models/
# The number of times to run the neural network for a given season
EPOCHS = 20
# The rate at which to modify the NN Weights at
LEARNING_RATE = 0.1
# The size to split train/test data at.
TRAIN_SIZE = 0.80
# The NBA season to train and test with
SEASON = 2003-2018
# This will randomize the NN shape in order to test out different config automatically
RANDOMIZE_NN_SHAPE = False
# The shape of the neural network. 12 4 would be a NN with 2 hidden layers, 12 and 4 neurons respectively
NN_SHAPE = 24 24 24 10
# The Feature selection strategy to use. Options are:
#                                UsePrevious - Uses the previous feature set configuration
#                                UseNBestAndRandom <INTEGER> - Picks the N best performers and includes them in the next feature set selection, but randomizes the new feature additions
#                                UseBest - Picks the best performers
#                                Default - Uses the default feature set configuration outlined in read_game.py
FEATURE_SELECTION_STRATEGY = Default
# Here you can set up a batch run of several instances with varying features each time
BATCH_RUN = 1
# Set the feature strategy used for each batch run here.
BATCH_RUN_FEATURE_SELECTION_STRATEGY = Default
# If set to true, the in-game features weight on game determination will be strengthened/weakened depending on how large the disparity
# between the teams records are
NORMALIZE_WEIGHTS_ACCORDING_TO_RECORD = False




